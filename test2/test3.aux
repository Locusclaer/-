\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}实验要求}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}学习命令行环境，并用其进行系统交互}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}简单学习Python}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}学习Python的视觉应用}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}实验内容}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}命令行环境的学习}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.1}命令行环境是一种与计算机进行交互的方式，通过输入文本命令来控制计算机的操作，而不是使用图形用户界面（GUI）。在命令行环境中，你可以通过键盘输入命令来执行程序、管理文件、配置系统等。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.2}常见的命令行环境包括：\\1.Windows Command Prompt：这是 Windows 操作系统中自带的命令行工具，允许用户执行各种系统命令，如 dir 查看目录内容，copy 复制文件等。\\2.PowerShell：这是 Windows 操作系统中的另一个命令行工具，提供更强大的脚本功能和命令管理能力，支持更复杂的任务和自动化操作。\\3.Unix/Linux Shells：在 Unix 和 Linux 系统中，命令行环境通常是 Bash、Zsh、Fish 等 Shell。你可以在这些 Shell 中运行各种命令来管理系统、运行脚本等。例如，ls 命令列出目录内容，grep 用于搜索文本。\\4.macOS Terminal：macOS 操作系统中的命令行工具，通常运行 Bash 或 Zsh，可以用来执行各种系统任务、运行脚本等。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.1.3}命令行环境通常具有以下优点：\\1.效率高：对于一些复杂或重复的任务，通过命令行输入命令可以比使用图形界面更快。\\2.自动化：可以编写脚本来自动化执行任务，减少手动操作。\\3.资源占用少：命令行界面通常比图形界面消耗的系统资源少。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Python的入门学习}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.1}Python 是一种广泛使用的高级编程语言，由 Guido van Rossum 于 1991 年首次发布。它以其简洁易读的语法和强大的功能而闻名，适用于从简单脚本到复杂应用程序的各种编程任务，被广泛应用于数据分析、机器学习、网站开发、自动化脚本、科学计算等多个领域，是现代编程的重要工具。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.2.2}Python 的特点包括：\\1.易读性：Python 的语法设计注重可读性，代码结构清晰，便于理解和维护。\\2.简洁性：Python 允许用更少的代码完成更多的任务，相比其他语言，编写和阅读代码时更为简洁。\\3.广泛的库和框架：Python 拥有丰富的标准库和第三方库，如 NumPy、Pandas、Django 和 Flask，这些库和框架可以帮助开发者快速构建各种应用。\\4.跨平台：Python 是跨平台的，意味着它可以在 Windows、macOS 和 Linux 等不同操作系统上运行。\\5.多范式支持：Python 支持面向对象编程、函数式编程和过程式编程等多种编程范式，适应不同的编程需求。\\6.社区和支持：Python 拥有一个活跃的社区，提供大量的教程、文档和支持，使得学习和使用 Python 更加便捷。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Python视觉应用}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.1}Python 视觉应用指的是利用 Python 编程语言开发的与计算机视觉相关的应用程序。这些应用程序能够分析和处理图像或视频数据，从而执行特定的视觉任务，如物体检测、图像分类、面部识别、图像分割等。}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.2}Python 在计算机视觉领域非常流行，主要得益于其丰富的库和工具。以下是一些常用的 Python 库和框架，用于开发视觉应用：}{2}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.3.3}Python 视觉应用的实际例子包括：}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}课堂练习}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.1}我们可以使用类似 ps aux | grep 这样的命令来获取任务的 pid ，然后您可以基于 pid 来结束这些进程。但我们其实有更好的方法来做这件事。在终端中执行 sleep 10000 这个任务。然后用 Ctrl-Z 将其切换到后台并使用 bg 来继续允许它。现在，使用 pgrep 来查找 pid 并使用 pkill 结束进程而不需要手动输入 pid。(提示：: 使用 -af 标记)。}{3}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.2}为您的配置文件新建一个文件夹，并设置好版本控制在其中添加至少一个配置文件，比如说您的 shell，在其中包含一些自定义设置（可以从设置 \$PS1 开始）。}{4}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.3}完成题目所给的tmux教程，并且参考那些步骤来学习如何自定义tmux}{4}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.4}创建一个 dc 别名，它的功能是当我们错误的将 cd 输入为 dc 时也能正确执行。}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}实验中遇到的问题与解决方法}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}输入命令pgrep想要获取进程的pid时，显示该命令是无效的命令}{5}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}在Linux系统的虚拟机终端上输入python查看python版本时，显示该命令无效}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}在bash中想用pkill命令来删除进程，但是却无法删除}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}实例练习}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}使用python写一段程序，计算两个数的和}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}使用python写一段程序，判断一个数是否为素数}{6}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}使用python写一段程序，打印出斐波那契数列的前n项}{7}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}使用python写一段程序，实现字符串反转功能}{7}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}使用python写一段程序，实现字符串反转功能}{8}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6}判断一段字符串是否为回文}{8}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7}读取文件中内容并将其打印出来}{9}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.8}利用递归实现快速排序算法}{10}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9}引入turtle库进行简单的图像绘制}{10}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.10}使用matplotlib绘制正弦波形}{11}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.11}使用Tkinter创建一个简单的图形用户界面}{12}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.12}暂停一秒输出}{13}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.13}打印出所有的"水仙花数"}{13}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.14}输出指定格式的日期}{14}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.15}输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。}{15}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.16}绘制一个简单的食物网}{15}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.17}写一个计时器}{16}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.18}写一个简易加法计算器}{17}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.19}文件列表器}{17}{}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.20}制作一个简单的HTTP服务器}{18}{}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}实验收获与感悟}{18}{}\protected@file@percent }
\gdef \@abspage@last{18}
